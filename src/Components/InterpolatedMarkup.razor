@namespace BlaTeX.Components

@{
    Index prevEnd = 0;
    @foreach (var (range, fragment) in Selector(Markup))
    {
        @((MarkupString)Markup[prevEnd..range.Start])
        @fragment

        prevEnd = range.End;
    }
    @((MarkupString)Markup[prevEnd..])
}

@code {
    /// <summary> Markup of which parts may be replaced by fragment renderers. </summary>
    [Parameter]
    public required string Markup { get; init; }

    /// <summary> Gets the ranges in <see cref="Markup"/> where fragments are to be rendered instead. </summary>
    [Parameter]
    public required Func<string, IEnumerable<(Range, RenderFragment)>> Selector { get; init; }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.AssertPresent(this.Markup, nameof(this.Markup));
        parameters.AssertPresent(this.Selector, nameof(this.Selector));

        return base.SetParametersAsync(parameters);
    }
}
