@namespace BlaTeX.Components

@{
    Range prevRange = 0..0;
    @foreach (var range in Selector(Markup))
    {
        @((MarkupString)Markup[prevRange.End..range.Start])
        @Substitute(Markup[range])

        prevRange = range;
    }
    @((MarkupString)Markup[prevRange.End..])
}

@code {
    /// <summary> Markup of which parts may be replaced by render fragments. </summary>
    [Parameter]
    public required string Markup { get; init; }

    /// <summary> Gets the ranges in <see cref="Markup"/> at which a <see cref="RenderFragment"/> is to be rendered instead of the verbatim markup. </summary>
    [Parameter]
    public required Func<string, IEnumerable<Range>> Selector { get; init; }

    /// <summary> Computes the fragment to render given a substring of <see cref="Markup"/>. </summary>
    [Parameter]
    public required Func<string, RenderFragment> Substitute { get; init; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.AssertPresent(this.Markup, nameof(this.Markup));
        parameters.AssertPresent(this.Selector, nameof(this.Selector));
        parameters.AssertPresent(this.Substitute, nameof(this.Substitute));

        await base.SetParametersAsync(parameters);
    }
}
