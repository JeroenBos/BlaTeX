@inject IKaTeX JS

@if (markup != null)
{
    <MarkupStringWithComponents Markup="@markup"
                                Substitute="@Substitute"
                                Selector="@Selector" >

    </MarkupStringWithComponents>
}
else if (Loading != null)
{
    @Loading
}
else
{   
    <div> Rendering... </div>
}

@code {
    #nullable enable
    internal string? markup = default;

    [Parameter]
    public string Math { get; set; }

    [Parameter]
    public RenderFragment Loading { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        await this.update();
    }

    private async Task update()
    {
        if (this.Math == null)
            this.markup = null;
        else
            this.markup = await JS.RenderToString(this.Math);
        this.StateHasChanged();
    }

    internal protected virtual IEnumerable<Range> Selector(string markup)
    {
        return Enumerable.Empty<Range>();
    }
    internal protected virtual RenderFragment Substitute(string markupFragment)
    {
        throw new InvalidOperationException("This method must be overridden");
    }
}