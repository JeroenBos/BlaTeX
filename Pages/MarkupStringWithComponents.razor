@{
	Range prevRange = 0..0;
	@foreach (var range in Selector(Markup))
	{
		@((MarkupString)Markup[prevRange.End..range.Start])
		@Substitute(Markup[range])

		prevRange = range;
	}
	@((MarkupString)Markup[prevRange.End..])
}

@code {
#nullable enable
	/// <summary> Markup of which parts may be replaced by render fragments. </summary>
	[Parameter]
	public string Markup { get; set; } = default!;

	/// <summary> Gets the ranges in <see cref="Markup"/> at which a <see cref="RenderFragment"/> is to be rendered instead of the verbatim markup. </summary>
	[Parameter]
	public Func<string, IEnumerable<Range>> Selector { get; set; } = default!;

	/// <summary> Computes the fragment to render given a substring of <see cref="Markup"/>. </summary>
	[Parameter]
	public Func<string, RenderFragment> Substitute { get; set; } = default!;

	public override async Task SetParametersAsync(ParameterView parameters)
	{
		parameters.AssertPresent(this.Markup, nameof(this.Markup));
		parameters.AssertPresent(this.Selector, nameof(this.Selector));
		parameters.AssertPresent(this.Substitute, nameof(this.Substitute));

		await base.SetParametersAsync(parameters);
	}
}
